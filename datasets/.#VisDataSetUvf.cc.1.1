#include "gcp/datasets/VisDataSetUvf.h"

#include "gcp/util/FitsBinTableReader.h"

using namespace gcp::datasets;
using namespace gcp::util;
using namespace std;

/**.......................................................................
 * Constructor.
 */
VisDataSetUvf::VisDataSetUvf() {}

/**.......................................................................
 * Destructor.
 */
VisDataSetUvf::~VisDataSetUvf() {}

/**.......................................................................
 * Initialize the file reader
 */
void VisDataSetUvf::openFileReader(std::string fileName)
{
  reader_.openFile(fileName);
}

/**.......................................................................
 * Close the file readear
 */
void VisDataSetUvf::closeFileReader()
{
  reader_.close();
}

/**.......................................................................
 * Method to get the next group of visibilties from a file
 */
void VisDataSetUvf::getGroup(unsigned iGroup, ObsInfo::Vis& vis)
{
  FitsUvfReader::Vis uvfVis;
  reader_.readData(iGroup, uvfVis);
  vis = uvfVis;
}

/**.......................................................................
 * Initialize antenna/baseline information from the antenna table (if any) 
 */
void VisDataSetUvf::initializeAntennaInformation(std::string fileName)
{
  // Initialize antenna information from the FITS binary table

  FitsBinTableReader tableReader(fileName);

  //------------------------------------------------------------
  // Iterate over all tables in the file until we find an antenna
  // table, or we reach the end
  //------------------------------------------------------------

  bool stop=false;
  while(!stop) {
    try {
      tableReader.getNextTableInfo();

      // If this is an AIPS AN table, the number of antennas should be
      // the number of rows in the table

      if(tableReader.tableName() == "AIPS AN") {

	// Only resize the antenna array if it hasn't already been set
	// up manually

	if(obs_.antennas_.size() == 0) {
	  obs_.setNumberOfAntennas(tableReader.nRow());

	  // If the antennas have already been specified, check that
	  // that specification agrees with the AIPS AN table

	} else if(obs_.antennas_.size() != tableReader.nRow()) {
	  ReportError("Warning: The previously specified number of antennas (" << obs_.antennas_.size() << ")"
		      << " doesn't match what's in the AIPS AN table (" << tableReader.nRow() << ")");
	}

	//------------------------------------------------------------
	// See if the antenna locations were specified
	//------------------------------------------------------------

	unsigned nCol = tableReader.nCol();

	for(unsigned iCol = 0; iCol < nCol; iCol++) {
	  if(tableReader.colName(iCol) == "LX" || tableReader.colName(iCol) == "LY" 
	     || tableReader.colName(iCol) == "LZ") {

	    std::vector<double> vals = tableReader.getDoubleData(iCol);

	    if(vals.size() != obs_.antennas_.size()) {
	      ThrowError("Column size is > number of antennas");
	    }

	    for(unsigned iAnt=0; iAnt < obs_.antennas_.size(); iAnt++) {

	      Length length(Length::Meters(), vals[iAnt]);

	      if(tableReader.colName(iCol)        == "LX") {
		COUT("Setting antenna X");
		obs_.setAntennaX(length, iAnt);
	      } else if(tableReader.colName(iCol) == "LY") {
		COUT("Setting antenna Y");
		obs_.setAntennaY(length, iAnt);
	      } else if(tableReader.colName(iCol) == "LZ") {
		COUT("Setting antenna Z");
		obs_.setAntennaZ(length, iAnt);
	      }

	    }
	  }
	}

	stop = true;
      }
    } catch(...) {
      stop = true;
    }
  }
}

/**.......................................................................
 * Update frequency information from the UVF file
 */
void VisDataSetUvf::updateFrequencyInformation()
{
  std::vector<double> freqsHz = reader_.ifs();
  double bwHz   = reader_.ifDelta();
  std::vector<Frequency> freqs;
  std::vector<Frequency> bws;

  freqs.resize(freqsHz.size());
  bws.resize(freqsHz.size());

  for(unsigned i=0; i < freqs.size(); i++) {
    freqs[i].setHz(freqsHz[i]);
    bws[i].setHz(bwHz);
  }

  obs_.setFrequencyInformation(freqs, bws);
}

/**.......................................................................
 * Update RA/DEC information
 */
void VisDataSetUvf::updateObservationInformation()
{
  obs_.setSourceName(reader_.object());
  obs_.setObsRa(reader_.obsra());
  obs_.setObsDec(reader_.obsdec());
  obs_.setObsEquinox(reader_.equinox());
  obs_.setTelescopeName(reader_.telescope());
  obs_.setInstrumentName(reader_.instrument());
}

/**.......................................................................
 * Update visibility information
 */
void VisDataSetUvf::updateVisibilityInformation()
{
  obs_.setNumberOfGroups(reader_.nGroup());
  obs_.setNumberOfStokesParameters(reader_.nStokes());
}


