#include <iostream>
#include <math.h>

#include "gcp/program/Program.h"

#include "gcp/util/Exception.h"
#include "gcp/util/LogStream.h"
#include "gcp/util/IoLock.h"
#include "gcp/util/Exception.h"
#include "gcp/util/FitsBinTableReader.h"
#include "gcp/util/FitsUvfReader.h"

#include "gcp/pgutil/PgUtil.h"

#include "gcp/fftutil/Dft2d.h"
#include "gcp/fftutil/Image.h"

#include "gcp/datasets/VisDataSet.h"

using namespace std;
using namespace gcp::datasets;
using namespace gcp::program;
using namespace gcp::util;

KeyTabEntry Program::keywords[] = {
  { "dev",      "/xs",            "s", "Pgplot device"},
  { "file",     "",               "s", "FITS file to read in"},
  { "zeropad",  "f",              "b", "Zeropad the array?"},
  { "phase",    "0.0",            "d", "Phase (degrees)"},
  { "period",   "64",             "d", "Period (pixels)"},
  { "freq",     "30",             "d", "freq (GHz)"},
  { "perc",     "0.98",           "d", "percent correlation"},
  { END_OF_KEYWORDS,END_OF_KEYWORDS,END_OF_KEYWORDS,END_OF_KEYWORDS},
};

void Program::initializeUsage() {};

void testReader(std::string& file);

int Program::main()
{
#if 0
  unsigned nAnt = 8;

  // Set up the array

  VisDataSet vds;
  vds.setNumberOfAntennas(nAnt);
  vds.setAntennaType(Antenna::ANT_SZA);

  // Now iterate through the UVF file, reading each group to determine
  // how many baselines actually belong to each baseline group, and
  // what the maximum UV radius encountered is.

  vds.countData(file);

  // Here's where we actually read the data

  COUT("Loading data:");
  vds.loadData(file, perc);

  // Now calculate primary beams

  COUT("Calculating primary beams:");
  vds.computePrimaryBeams();
#endif
  return 0;
}

